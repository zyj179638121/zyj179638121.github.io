<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小赵的blog]]></title>
  <link href="http://zyj179638121.github.io/atom.xml" rel="self"/>
  <link href="http://zyj179638121.github.io/"/>
  <updated>2016-09-01T09:33:22+08:00</updated>
  <id>http://zyj179638121.github.io/</id>
  <author>
    <name><![CDATA[小赵]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS屏蔽emoji表情]]></title>
    <link href="http://zyj179638121.github.io/blog/2016/08/11/iOS%20%E5%B1%8F%E8%94%BDemoji%E8%A1%A8%E6%83%85%20%E4%B8%8B%E5%8D%885.21.42/"/>
    <updated>2016-08-11T09:49:46+08:00</updated>
    <id>http://zyj179638121.github.io/blog/2016/08/11/iOS 屏蔽emoji表情 下午5.21.42</id>
    <content type="html"><![CDATA[<p><strong>iOS屏蔽emoji表情,直接上代码,Swift国旗的emoji暂时不能屏蔽,其余的基本上都可以</strong></p>

<p><code>Swift版本</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -&gt; Bool {
</span><span class='line'>        
</span><span class='line'>        if text.containsEmoji {
</span><span class='line'>            return false
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        return true
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extension String {
</span><span class='line'>    var containsEmoji: Bool {
</span><span class='line'>        for scalar in unicodeScalars {
</span><span class='line'>            switch scalar.value {
</span><span class='line'>            case 0x1F600...0x1F64F,
</span><span class='line'>             0x1F300...0x1F5FF,
</span><span class='line'>             0x1F680...0x1F6FF,
</span><span class='line'>             0x2600...0x26FF,
</span><span class='line'>             0x2700...0x278B,
</span><span class='line'>             0x2792...0x27BF,
</span><span class='line'>             0xFE00...0xFE0F:
</span><span class='line'>                return true
</span><span class='line'>            case 0x278B...0x2792:
</span><span class='line'>                return false
</span><span class='line'>            default:
</span><span class='line'>                continue
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return false
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>OC版本</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
</span><span class='line'>    BOOL result = [self stringContainsEmoji:text];
</span><span class='line'>    if (result) {
</span><span class='line'>        return NO;
</span><span class='line'>    }
</span><span class='line'>    return YES;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)stringContainsEmoji:(NSString *)string
</span><span class='line'>{
</span><span class='line'>    __block BOOL returnValue = NO;
</span><span class='line'>    
</span><span class='line'>    [string enumerateSubstringsInRange:NSMakeRange(0, [string length])
</span><span class='line'>                               options:NSStringEnumerationByComposedCharacterSequences
</span><span class='line'>                            usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
</span><span class='line'>                                const unichar hs = [substring characterAtIndex:0];
</span><span class='line'>                                NSLog(@"hs = %hu",hs);
</span><span class='line'>                                if (0xd800 &lt;= hs && hs &lt;= 0xdbff) {
</span><span class='line'>                                    if (substring.length &gt; 1) {
</span><span class='line'>                                        const unichar ls = [substring characterAtIndex:1];
</span><span class='line'>                                        const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
</span><span class='line'>                                        if (0x1d000 &lt;= uc && uc &lt;= 0x1f77f) {
</span><span class='line'>                                            returnValue = YES;
</span><span class='line'>                                        }
</span><span class='line'>                                    }
</span><span class='line'>                                } else if (substring.length &gt; 1) {
</span><span class='line'>                                    const unichar ls = [substring characterAtIndex:1];
</span><span class='line'>                                    if (ls == 0x20e3) {
</span><span class='line'>                                        returnValue = YES;
</span><span class='line'>                                    }
</span><span class='line'>                                } else {
</span><span class='line'>                                    if (0x2100 &lt;= hs && hs &lt;= 0x27ff) {
</span><span class='line'>                                        if (0x278B &lt;= hs && hs &lt;= 0x2792){
</span><span class='line'>                                            returnValue = NO;
</span><span class='line'>                                        }else{
</span><span class='line'>                                            returnValue = YES;
</span><span class='line'>                                        }
</span><span class='line'>                                    } else if (0x2B05 &lt;= hs && hs &lt;= 0x2b07) {
</span><span class='line'>                                        returnValue = YES;
</span><span class='line'>                                    } else if (0x2934 &lt;= hs && hs &lt;= 0x2935) {
</span><span class='line'>                                        returnValue = YES;
</span><span class='line'>                                    } else if (0x3297 &lt;= hs && hs &lt;= 0x3299) {
</span><span class='line'>                                        returnValue = YES;
</span><span class='line'>                                    } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50) {
</span><span class='line'>                                        returnValue = YES;
</span><span class='line'>                                    }
</span><span class='line'>                                }
</span><span class='line'>                            }];
</span><span class='line'>    
</span><span class='line'>    return returnValue;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS UITabbar消失的问题]]></title>
    <link href="http://zyj179638121.github.io/blog/2016/08/03/iOS%20UITabbar%E6%B6%88%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98%20%E4%B8%8B%E5%8D%885.21.42/"/>
    <updated>2016-08-03T15:37:27+08:00</updated>
    <id>http://zyj179638121.github.io/blog/2016/08/03/iOS UITabbar消失的问题 下午5.21.42</id>
    <content type="html"><![CDATA[<p>前两天碰到过uitabbar莫名消失的问题,代码里面没有对uitabbar的hidden做处理,折腾了半天,后来发现了问题的所在,是因为在storyboard里面控制tabbar隐藏的时候,本来应该在SB里面UINavigationController对应的属性上面勾上 Hide Bottom Bar on Push,结果我在ViewController对应的属性上勾上了此选项&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 第一章]]></title>
    <link href="http://zyj179638121.github.io/blog/2016/08/01/git%20add%20remote%20%E4%B8%8B%E5%8D%885.21.42/"/>
    <updated>2016-08-01T15:34:27+08:00</updated>
    <id>http://zyj179638121.github.io/blog/2016/08/01/git add remote 下午5.21.42</id>
    <content type="html"><![CDATA[<h1>第一次写东西,git关联远程仓库</h1>

<h2>gogs</h2>

<p>1.gogs上面新建一个仓库<br/>
2.xcode新建工程<br/>
3.git add .<br/>
4.git commit -m “commit information” //commit<br/>
5.git remote add origin xxxxxxx //添加远程仓库,xxx为仓库地址<br/>
6.git push -u origin master  // push到远程仓库</p>

<h2>gitoschina</h2>

<p>1.oschina上面新建一个仓库<br/>
2.xcode新建工程<br/>
3.git add .<br/>
4.git commit -m “commit information”<br/>
5.git remote add origin xxxx //添加远程仓库,xxx为仓库地址<br/>
6.git pull origin master //这时如果不先pull,直接push回报错,需要先同步当前分支和主分支一致<br/>
7.git push origin master //push到远程分支</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3dtouch、shortcutitem、peek and Pop]]></title>
    <link href="http://zyj179638121.github.io/blog/2015/11/10/3DTouch%E3%80%81ShortcutItem%E3%80%81Peek-And-Pop/"/>
    <updated>2015-11-10T00:00:00+08:00</updated>
    <id>http://zyj179638121.github.io/blog/2015/11/10/3DTouch、ShortcutItem、Peek-And-Pop</id>
    <content type="html"><![CDATA[<p>layout: ios9
title: 3DTouch、ShortcutItem、Peek And Pop
date: 2015-11-10 11:01:28
tags:</p>

<hr />

<h3>3DTouch</h3>

<!--more-->


<p><img src="http://i12.tietuku.com/14bc7ec46d5364ab.jpg" alt="" /></p>

<h4>UITouch类里API的变化</h4>

<h5>iOS9中添加的属性</h5>

<p><code>altitudeAngle</code></p>

<ul>
<li><p>当笔平行于平面时,该值为0</p></li>
<li><p>当笔垂直于平面时,该值为Pi / 2</p></li>
</ul>


<p><code>estimatedProperties</code></p>

<ul>
<li><p>当前触摸对象估计的触摸特性</p></li>
<li><p>返回值是UITouchPropertyies</p></li>
</ul>


<p><code>updatedProperties</code></p>

<ul>
<li><p>当前触摸对象已经更新的触摸特性</p></li>
<li><p>返回值是UITouchPropertyies</p></li>
</ul>


<p><code>estimationUpdateIndex</code></p>

<ul>
<li><p>当每个触摸对象的触摸特性发生变化时，该值将会单独增加</p></li>
<li><p>返回值是NSNumber</p></li>
</ul>


<h5>iOS9中添加的方法</h5>

<p><code>- PreciseLocationInView:</code></p>

<ul>
<li><p>当前触摸对象的坐标
<code>- PrecisePreviousLocationInView:</code></p></li>
<li><p>当前触摸对象的前置坐标
<code>- azimuthAngleInview:</code></p></li>
<li><p>沿着x轴正向的方位角</p></li>
<li><p>当与x轴正向方向相同时,该值为0</p></li>
<li><p>当view参数为nil时，默认为keyWindow</p></li>
</ul>


<p><code>- azimuthUnitVectorInView:</code></p>

<ul>
<li><p>当前触摸对象的方向上的单位向量</p></li>
<li><p>当view参数为nil时，默认为keyWindow</p></li>
</ul>


<h4>UIForceTouchCapability</h4>

<p><code>UIForceTouchCapabilityUnknown</code></p>

<ul>
<li>不能确定是否支持压力感应
<code>UIForceTouchCapabilityUnavailable</code></li>
<li>不能支持压力感应
<code>UIForceTouchCapabilityAvailable</code></li>
<li><p>可以支持压力感应</p>

<h4>UITouchType</h4>

<p><code>UITouchTypeDirect</code></p></li>
<li><p>垂直的触摸类型
<code>UITouchTypeIndirect</code></p></li>
<li>非初值的触摸类型
<code>UITouchTypeStylus</code></li>
<li>水平的触摸类型
<code>UITouchProperties</code>
<code>UITouchPropertyForce</code></li>
</ul>


<hr />

<h3>ShortcutItem</h3>

<hr />

<p><img src="http://i12.tietuku.com/3aa54dab286d6e1c.jpg" alt="" /></p>

<h4>静态方式</h4>

<ul>
<li>打开Info.plist文件</li>
<li>在对应UIApplicationShortcutItems关键字下添加item

<h4>动态方式</h4>

<h5>修改当前应用程序的某个shortcutItem</h5>

<pre><code>    //获取第0个shortcutItem  
    id oldItem = [existingShortcutItems objectAtIndex: 0];  
    //将旧的shortcutItem改变为可修改类型shortcutItem  
    id mutableItem = [oldItem mutableCopy];  
    //修改shortcutItem的显示标题  
    [mutableItem setLocalizedTitle: @“Click Lewis”];
</code></pre>

<h5>获取当前应用程序的shortcutItems</h5>

<pre><code>    //获取当前应用程序对象  
    UIApplication *app = [UIApplication sharedApplication];  
    //获取一个应用程序对象的shortcutItem列表  
    id existingShortcutItems = [app shortcutItems];
</code></pre>

<h5>重置当前应用程序的shortcutItems</h5>

<pre><code>    //根据旧的shortcutItems生成可变shortcutItems数组  
    id updatedShortcutItems = [existingShortcutItems mutableCopy];  
    //修改可变shortcutItems数组中对应index下的元素为新的shortcutItem  
    [updatedShortcutItems replaceObjectAtIndex: 0 withObject: mutableItem];  
    //修改应用程序对象的shortcutItems为新的数组  
    [app setShortcutItems: updatedShortcutItems];
</code></pre>

<h5>创建一个新的UIApplicationShortcutItem</h5></li>
<li><p>初始化函数</p>

<ul>
<li>initWithType:localizedTitle:localizedSubtitle:icon:userInfo:</li>
</ul>
</li>
<li>initWithType:localizedTitle:</li>
<li><p>属性</p>

<ul>
<li><p>localizedTitle:NSString</p></li>
<li><p>localizedSubtitle:NSString</p></li>
<li><p>type:NSString</p></li>
<li><p>icon:UIApplicationShortcutIcon</p></li>
<li><p>userInfo:NSDictionary</p></li>
<li><p>只有只读特性，想要进行修改时，需要通过mutableCopy方法转变为
NSMutableApplicationShortcutItem</p>

<h4>创建一个新的Item图标</h4></li>
</ul>
</li>
<li><p>初始化函数</p>

<ul>
<li><p>iconWithType:</p></li>
<li><p>iconWithTemplateImageName:</p></li>
<li><p>iconWithContact:</p></li>
</ul>
</li>
</ul>


<h4>当程序启动时</h4>

<ul>
<li>判断launchOptions字典内的UIApplicationLaunchOptionsShortcutItemKey是否为空</li>
<li>当不为空时,application:didFinishLaunchWithOptions方法返回false，否则返回true</li>
<li>在application:performActionForShortcutItem:completionHandler方法内处理点击事件</li>
</ul>


<hr />

<h3>Peek and Pop</h3>

<hr />

<p><img src="http://i12.tietuku.com/544e882ddf85ae59.jpg" alt="" />
注册预览功能的代理对象和源视图
代理对象需要接受UIViewControllerPreviewingDelegate协议
  @interface RootVC<UIViewControllerPreviewingDelegate><br/>
  {}<br/>
  @end
代理对象实现协议内的Peek和Pop方法</p>

<pre><code>  @implementation RootVC  
  - (UIViewController *)previewingContext:(id&lt;UIViewControllerPreviewing&gt;)context viewControllerForLocation:(CGPoint) point  
  {  
  UIViewController *childVC = [[UIViewController alloc] init];  
  childVC.preferredContentSize = CGSizeMake(0.0f,300f);  

  CGRect rect = CGRectMake(10, point.y - 10, self.view.frame.size.width - 20,20);  
  context.sourceRect = rect;  
  return childVC;  
  }  
  - (void)previewContext:(id&lt;UIViewControllerPreviewing&gt;)context commitViewController:(UIViewController*)vc  
  {  
  [self showViewController:vc sender:self];  
  }  
  @end
</code></pre>

<h4>注册方法声明在UIViewController类内</h4>

<pre><code>[self registerForPreviewingWithDelegate:self sourceView:self.view];      
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用webviewjavascriptbridge实现oc与js交互]]></title>
    <link href="http://zyj179638121.github.io/blog/2015/06/10/%E4%BD%BF%E7%94%A8WebViewJavascriptBridge%E5%AE%9E%E7%8E%B0OC%E4%B8%8EJS%E4%BA%A4%E4%BA%92/"/>
    <updated>2015-06-10T00:00:00+08:00</updated>
    <id>http://zyj179638121.github.io/blog/2015/06/10/使用WebViewJavascriptBridge实现OC与JS交互</id>
    <content type="html"><![CDATA[<p>title: 使用WebViewJavascriptBridge实现OC与JS交互
date: 2015-6-10 10:22:27
tags:</p>

<hr />

<h4>前言</h4>

<p>当下,很多APP里面都会有HTML5网页,我们除了简单的用WebView加载显示外，很多情况下，我们还需要和WebView进行交互,比如点击WebView上面的按钮调用OC端的函数实现具体操作。</p>

<!--more-->


<p>因此今天为大家介绍一个优秀的开源小项目,就是我们今天的主角&ndash;<code>WebViewJavascriptBridge</code>。它主要帮助我们优雅的实现OC与JS的交互,非常方便简洁。</p>

<p>当然,有很多优秀的开发者写过WebViewJavascriptBridge的使用包括实现原理,首先表示感激和敬意。但是作为一个初学者或者一个急于实现功能的人来说,大部分时候我们更希望一个直奔主题的文章。所以,本文的核心就是WebViewJavascriptBridge在实际开发中的使用。
使用步骤
去Github上下载<code>WebJavaScriptBridge</code>
解压缩包,将<code>WebViewJavascriptBridge</code>文件夹拖到你的工程中</p>

<p>在需要使用<code>WebViewJavascriptBridge</code>的类文件中引入头文件<code>WebViewJavascriptBridge.h</code>
加载UIWebView,遵守<code>&lt;UIWebViewDelegate&gt;</code>协议
具体使用
创建并初始化WebJavaScriptBridge实例</p>

<pre><code>   #import "ExampleUIWebViewController.h"
   #import "WebViewJavascriptBridge.h"

  @interface ExampleUIWebViewController ()
  //声明`WebViewJavascriptBridge`对象为属性
   @property WebViewJavascriptBridge* bridge;

  @end

  - (void)viewWillAppear:(BOOL)animated {

   //用UIWebView加载web
    UIWebView* webView = [[UIWebView alloc] initWithFrame:self.view.bounds];

 //设置能够进行桥接 
    [WebViewJavascriptBridge enableLogging];
 // 初始化*WebViewJavascriptBridge*实例,设置代理,进行桥接
   _bridge = [WebViewJavascriptBridge bridgeForWebView:webView webViewDelegate:self handler:^(id         data, WVJBResponseCallback responseCallback) {

NSLog(@"ObjC received message from JS: %@", data);
     responseCallback(@"Response for message from ObjC");
     }];

}
</code></pre>

<h4>JS调用OC</h4>

<p>什么是JS调用OC?</p>

<p>举个例子来说就是在网页中有一个登录按钮,点击登录按钮后,具体的登录功能是由OC端实现的,即登录功能实现需要我们在工程里有一个类似loginMethod的函数去具体操作。
工作流程</p>

<p>站在实际开发的角度来解释,就是假如现在有一个网页,在网页中有个登录按钮需要通过JS调OC的方式实现。那么我们首先需要跟负责网页编码的人员(一般是后台)商定出一个方法名称,也就是给这个登录按钮点击事件取个名字,例如叫loginCallBack。然后我们需要在代码里注册这个事件并负责它的具体实现。当用户点击这个登录按钮的时候,后台就会通知给这个事件的注册者去执行,有点像block的执行顺序。
代码实现</p>

<p>假如我们现在商定了一个事件名称为loginFunc,我们来看一下代码实现。</p>

<pre><code>  /***
  /@param registerHandler 要注册的事件名称(这里我们为loginFunc)
  /@param handel 回调block函数 当后台触发这个事件的时候会执行block里面的代码
 ***/
 [_bridge registerHandler:@"loginFunc" handler:^(id data, WVJBResponseCallback responseCallback) {
 // data 后台传过来的参数,例如用户名、密码等

   NSLog(@"testObjcCallback called: %@", data);

 //具体的登录事件的实现,这里的login代表实现登录功能的一个OC函数。
            [self login];   

 // responseCallback 给后台的回复    

    responseCallback(@"Response from testObjcCallback");
  }];
</code></pre>

<h4>OC调用JS</h4>

<p>什么是OC调用JS</p>

<p>如果你理解了JS调用OC,那么OC调用JS就应该差不多懂了。同样举个例子,我们的原生APP上有个输入框,我们输入完成后,让它显示在网页上面的用户名处。这样,我们就是OC要实现的一个事件让网页去真正实现了,也就是OC调用JS。
OC调用JS</p>

<p>和JS调用OC的流程大致一样,还是需要和网页编写人员商定出一个事件名,然后在网页里面先把注册这样一个事件并把实现体写好,等到我们OC去触发这个事件(比如点击按钮)就会去网页里面找到这个事件的实现体并执行。
代码实现</p>

<p>假如我们现在商定了一个注册事件,事件名称为registerFunc,我
们来代码实现一下</p>

<pre><code>   //不需要传参数,不需要后台返回执行结果
  [_bridge callHandler:@"registerFunc"];

//需要传参数,不需要从后台返回执行结果
  /***
   @param callHandler 商定的事件名称,用来调用网页里面相应的事件实现
   @param data id类型,相当于我们函数中的参数,向网页传递函数执行需要的参数
 ***/

 [_bridge callHandler:@"registerFunc" data:@"name"];

//需要传参数,需要从后台返回执行结果

 [_bridge callHandler:@"registerFunc" data:@"name" responseCallback:^(id responseData) {

    NSLog(@"后台执行完成后返回的数据");

  }];
</code></pre>

<p>发送消息</p>

<h4>概述</h4>

<p>我们可以单纯地向JS发送数据,比如我们可以在网页加载完成后向网页发送一条加载完成的消息,或者传一个标题。
代码实现</p>

<pre><code>  //不需要后台返回执行结果或数据
  [_bridge send:@"红色"];

  //需要后台返回执行结果或数据
    [_bridge send:@"红色" responseCallback:^(id responseData) {

    NSLog(@"后台执行完成后返回的数据 %@", responseData);

   }];
</code></pre>

<h4>注意点</h4>

<p>一定要注意和网页端商定的方法名必须要保证OC代码 里和网页编码里统一。在调用之前,必须要先注册事件,写好实现体。
总结
本文只是简单地介绍了WebViewJavascriptBridge在实际开发中常用的几个方法,还有一些方法没有意义详讲,希望大家在掌握了这几个方法的使用后也去研究一下里面的其他方法。另外,本文重点是让ios工程师能快速使用,一些原理的东西还有JS方面的编码都省略了,可能文中有些地方理解不当或者不够深入,后期会再完善修改.最后,希望大家多提宝贵意见。</p>

<p>大家可去gitHub下载demo查看源码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何上传本地文件到github]]></title>
    <link href="http://zyj179638121.github.io/blog/2015/04/11/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0github/"/>
    <updated>2015-04-11T13:00:04+08:00</updated>
    <id>http://zyj179638121.github.io/blog/2015/04/11/如何上传本地文件到github</id>
    <content type="html"><![CDATA[<p>在讲如何上传本地文件到github之前，有必要先简单的讲一下如何在本地创建仓库，以及如何添加文件。</p>

<h2>创建版本库</h2>

<p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>

<!--more-->


<p>所以，创建一个版本库非常简单。</p>

<blockquote><p>1.在电脑上选择一个合适的地方，创建一个空目录。</p></blockquote>

<pre><code>$ mkdir learngit创建一个名为learngit的文件夹。
$ cd learngit进入该文件夹。
$ pwd查看一下当前文件夹路径。
</code></pre>

<blockquote><p>2.通过git init这个命令初始化仓库，使之变为自己可以管理的仓库。</p></blockquote>

<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>

<p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>

<h2>在本地仓库添加文件</h2>

<p>现在，我们先创建一个名为text的txt格式的文件</p>

<p><code>$ vi text</code>编辑内容为<code>Hello world!</code></p>

<blockquote><p>1.使用git add命令告诉git，把文件添加到仓库。</p></blockquote>

<p><code>$ git add text</code>然后回车</p>

<p>这时候终端并没有什么提示，这样就对了。</p>

<blockquote><p>2.使用git commit命令告诉git，把文件提交到仓库。</p></blockquote>

<p><code>$ git commit -m "a text file"</code></p>

<p>然后下面会出现这段代码告诉你添加文件的信息，也就是添加成功了。</p>

<pre><code>[master 79d23f4] a text file
1 file changed, 1 insertion(+)
create mode 100644 text
</code></pre>

<p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>

<h2>添加远程库</h2>

<p>之前在介绍搭建hexo静态博客的时候，有讲过如何在github上创建仓库。所以，这里添加远程库也是一个道理，在Repository name填入<code>learngit</code>(这里要和你本地仓库的名称一样)，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。</p>

<p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>

<p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p>

<pre><code>$ git remote add origin git@github.com:IsaJenko/learngit.git
</code></pre>

<p>请千万注意，把上面的<code>IsaJenko</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>

<p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>

<p>下一步，就可以把本地库的所有内容推送到远程库上：
<code>$ git push -u origin master</code></p>

<p>请千万注意，把上面的<code>IsaJenko</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>

<p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>

<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>

<p><code>$ git push -u origin master</code></p>

<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>

<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。</p>

<p>从现在起，只要本地作了提交，也就是在本地<code>git add</code>之后在<code>git commit</code>之后就可以通过命令：</p>

<p><code>$ git push origin master</code></p>

<p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>

<h2>最后</h2>

<p>一些可能遇到的问题解决：</p>

<blockquote><p>如果输入
<code>$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git</code>
提示错误信息：<code>fatal: remote origin already exists.</code></p></blockquote>

<p>解决办法如下：</p>

<p>1、先输入<code>$ git remote rm origin</code></p>

<p>2、再输入<code>$ git remote add origin git@github.com:djqiang/gitdemo.git</code></p>

<p>就不会报错了！</p>

<blockquote><p>如果输入
<code>$ git push origin master</code></p>

<p>提示出错信息：
<code>error:failed to push som refs to …….</code></p></blockquote>

<p>解决办法如下：</p>

<p>1、先输入<code>$ git pull origin master</code> //先把远程服务器github上面的文件拉下来</p>

<p>2、再输入<code>$ git push origin master</code></p>

<p>3、如果出现报错 <code>fatal: Couldn’t find remote ref master</code>或者<code>fatal: ‘origin’ does not appear to be a git repository</code>以及<code>fatal: Could not read from remote repository.</code></p>

<p>4、则需要重新输入</p>

<h2><code>$ git remote add origingit@github.com:IsaJenko/learngit.git</code></h2>

<p>Create a new repository on the command line</p>

<pre><code>touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:IsaJenko/learngit.git
git push -u origin master
</code></pre>

<p>Push an existing repository from the command line</p>

<pre><code>git remote add origin git@github.com:IsaJenko/learngit.git
git push -u origin master
</code></pre>
]]></content>
  </entry>
  
</feed>
