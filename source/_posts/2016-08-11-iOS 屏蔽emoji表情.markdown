---
layout: post
title: "iOS屏蔽emoji表情"
date: 2016-08-11 09:49:46 +0800
comments: true
categories: 
---

**iOS屏蔽emoji表情,直接上代码**   

`Swift版本`   

```
func textViewDidChange(textView: UITextView) {
        let textRange = textView.selectedRange
        textView.text = self.disableEmoji(textView.text)
        textView.selectedRange = textRange
    }

```
```
func disableEmoji(text:String) -> String{
        
        var regex:NSRegularExpression?
        do {
            try regex = NSRegularExpression.init(pattern: "[^\\u0020-\\u007E\\u00A0-\\u00BE\\u2E80-\\uA4CF\\uF900-\\uFAFF\\uFE30-\\uFE4F\\uFF00-\\uFFEF\\u0080-\\u009F\\u2000-\\u201f\r\n]", options: .CaseInsensitive)
        }catch{
            print(error)
        }
        
        let modifiedString = regex!.stringByReplacingMatchesInString(text as String, options: .ReportProgress, range: NSMakeRange(0, text.characters.count), withTemplate: "")
        return modifiedString
    }
```   

`OC版本`

```
- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
    BOOL result = [self stringContainsEmoji:text];
    if (result) {
        return NO;
    }
    return YES;
}

```

```
- (BOOL)stringContainsEmoji:(NSString *)string
{
    __block BOOL returnValue = NO;
    
    [string enumerateSubstringsInRange:NSMakeRange(0, [string length])
                               options:NSStringEnumerationByComposedCharacterSequences
                            usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
                                const unichar hs = [substring characterAtIndex:0];
                                NSLog(@"hs = %hu",hs);
                                if (0xd800 <= hs && hs <= 0xdbff) {
                                    if (substring.length > 1) {
                                        const unichar ls = [substring characterAtIndex:1];
                                        const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                                        if (0x1d000 <= uc && uc <= 0x1f77f) {
                                            returnValue = YES;
                                        }
                                    }
                                } else if (substring.length > 1) {
                                    const unichar ls = [substring characterAtIndex:1];
                                    if (ls == 0x20e3) {
                                        returnValue = YES;
                                    }
                                } else {
                                    if (0x2100 <= hs && hs <= 0x27ff) {
                                        if (0x278B <= hs && hs <= 0x2792){
                                            returnValue = NO;
                                        }else{
                                            returnValue = YES;
                                        }
                                    } else if (0x2B05 <= hs && hs <= 0x2b07) {
                                        returnValue = YES;
                                    } else if (0x2934 <= hs && hs <= 0x2935) {
                                        returnValue = YES;
                                    } else if (0x3297 <= hs && hs <= 0x3299) {
                                        returnValue = YES;
                                    } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50) {
                                        returnValue = YES;
                                    }
                                }
                            }];
    
    return returnValue;
}
```


